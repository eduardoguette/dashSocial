{"version":3,"sources":["switch.js","header.js","card.js","top-cards-list.js","card-small.js","overview.js","App.js","serviceWorker.js","index.js"],"names":["Switch","setDarkMode","checked","setChecked","ref","useRef","className","onChange","current","type","id","htmlFor","arial-label","Header","children","data-id","Card","username","followers","todayFollower","icon","name","cardClass","src","alt","cardListData","TopCardList","map","cardData","key","CardSmall","growth","pageView","cardSmallList","Overview","App","useState","darkMode","mainClass","changeMedia","mq","matches","useEffect","window","matchMedia","addListener","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e112226d.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport \"./switch.css\";\r\n\r\nfunction Switch({ setDarkMode, checked, setChecked }) {\r\n  const ref = useRef(null);\r\n  function handleChange() {\r\n    setChecked(ref.current.checked);\r\n    setDarkMode(ref.current.checked);\r\n  }\r\n  return (\r\n    <div className=\"dark-mode\">\r\n      <p className=\"dark-mode-title\">Dark Mode</p>\r\n      <input ref={ref} onChange={handleChange} type=\"checkbox\" checked={checked} className=\"checkbox\" id=\"checkbox\" />\r\n      <label className=\"switch\" htmlFor=\"checkbox\" arial-label=\"disabled\"></label>\r\n    </div>\r\n  );\r\n}\r\nexport default Switch;\r\n","import React from \"react\"\r\nimport \"./header.css\"\r\nimport \"./switch\"\r\n\r\nfunction Header({children}) {\r\n  return (\r\n    <header className=\"header\" data-id=\"1\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"header-grid\">\r\n          <div>\r\n            <h1>Social Media Dashboard</h1>\r\n            <p className=\"header-total\">Total Followers: 2,314</p>\r\n          </div>\r\n          \r\n         {children}\r\n\r\n        </div>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./card.css\"\r\n\r\nfunction Card({ username, followers, todayFollower, icon, name }) {\r\n\r\n  const cardClass = `card ${name}`\r\n  return (\r\n    <article className={cardClass}>\r\n      <p className=\"card-title\">\r\n        <img src={icon} alt=\"icon-facebook\" />\r\n        {username}\r\n      </p>\r\n      <p className=\"card-followers\">\r\n        <span className=\"card-followers-number\">{followers}</span>\r\n        <span className=\"card-followers-title\">Followers</span>\r\n      </p>\r\n      <p className=\"card-today\">\r\n        <img src=\"./images/icon-up.svg\" alt=\"\" />\r\n        {todayFollower} today\r\n      </p>\r\n    </article>\r\n  )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './card'\r\nimport './top-cards-list.css'\r\n\r\nconst cardListData = [\r\n  {\r\n    id:1,\r\n    username: '@eduardoguette',\r\n    followers: 503,\r\n    todayFollower: 0,\r\n    icon: \"./images/icon-facebook.svg\",\r\n    name: 'facebook',\r\n  },\r\n  {\r\n    id:2,\r\n    username: '@eduardoguette',\r\n    followers: 499,\r\n    todayFollower: 0,\r\n    icon: \"./images/icon-twitter.svg\",\r\n    name: 'twitter',\r\n  },\r\n  {\r\n    id:3,\r\n    username: '@eduardoguette',\r\n    followers: 531,\r\n    todayFollower: -2,\r\n    icon: \"./images/icon-instagram.svg\",\r\n    name: 'instagram',\r\n  },\r\n  {\r\n    id:4,\r\n    username: '@eduardoguette',\r\n    followers: \"1229\",\r\n    todayFollower: 0,\r\n    icon: \"./images/icon-youtube.svg\",\r\n    name: 'youtube',\r\n  }\r\n]\r\n\r\n\r\n\r\nfunction TopCardList() {\r\n  return (\r\n\r\n    <section className=\"top-cards\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"grid\">\r\n          {\r\n            cardListData.map((cardData) =>\r\n              <Card key={cardData.id}{...cardData} />\r\n            )\r\n          }\r\n\r\n          {/*  <article className=\"card twitter\">\r\n            <p className=\"card-title\">\r\n              <img src=\"./images/icon-twitter.svg\" alt=\"icon-facebook\" />\r\n                    @eduardoguette\r\n          </p>\r\n            <p className=\"card-followers\">\r\n              <span className=\"card-followers-number\">410</span>\r\n              <span className=\"card-followers-title\">Followers</span>\r\n            </p>\r\n            <p className=\"card-today\">\r\n              <img src=\"./images/icon-up.svg\" alt=\"\" />\r\n                      0 today\r\n          </p>\r\n          </article>\r\n          <article className=\"card instagram\">\r\n            <p className=\"card-title\">\r\n              <img src=\"./images/icon-instagram.svg\"\r\n                alt=\"icon-facebook\" />\r\n                @eduardoguette\r\n          </p>\r\n            <p className=\"card-followers\">\r\n              <span className=\"card-followers-number\">499</span>\r\n              <span className=\"card-followers-title\">Followers</span>\r\n            </p>\r\n            <p className=\"card-today\">\r\n              <img src=\"./images/icon-up.svg\" alt=\"\" />\r\n                          1 today\r\n          </p>\r\n          </article>\r\n          <article className=\"card youtube\">\r\n            <p className=\"card-title\">\r\n              <img src=\"./images/icon-youtube.svg\" alt=\"icon-facebook\" />\r\n                            @eduardoguette\r\n          </p>\r\n            <p className=\"card-followers\">\r\n              <span className=\"card-followers-number\">1120</span>\r\n              <span className=\"card-followers-title\">Followers</span>\r\n            </p>\r\n            <p className=\"card-today\">\r\n              <img src=\"./images/icon-up.svg\" alt=\"\" />\r\n                              0 today\r\n          </p>\r\n          </article> */}\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n  )\r\n}\r\n\r\nexport default TopCardList;","import React from \"react\";\r\nimport \"./card-small.css\";\r\n\r\nexport default function CardSmall({ growth, pageView, icon }) {\r\n\r\n  return (\r\n    <div className=\"card-small\">\r\n      <p className=\"card-small-views\">Pages Views</p>\r\n      <p className=\"card-small-icon\">\r\n        <img src={icon} alt=\"icon\" />\r\n      </p>\r\n      <p className=\"card-small-number\">{pageView}</p>\r\n      <p className=\"card-small-porcentage is-danger\">\r\n        <span>\r\n          <img src=\"./images/icon-down.svg\" alt=\"icon\" />\r\n          {growth}%\r\n        </span>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport CardSmall from \"./card-small\"\r\nimport \"./overview.css\"\r\n\r\n\r\nconst cardSmallList = [\r\n  {\r\n    icon: './images/icon-facebook.svg',\r\n    pageView: '52',\r\n    growth: 3,\r\n    key: 1,\r\n\r\n  },\r\n  {\r\n    icon: './images/icon-twitter.svg',\r\n    pageView: '3',\r\n    growth: 30,\r\n    key: 2,\r\n\r\n  },\r\n  {\r\n    icon: './images/icon-instagram.svg',\r\n    pageView: '2257',\r\n    growth: 303,\r\n    key: 3,\r\n\r\n  },\r\n  {\r\n    icon: './images/icon-youtube.svg',\r\n    pageView: '1357',\r\n    growth: 32,\r\n    key: 4,\r\n\r\n  },\r\n]\r\n\r\n\r\n\r\nfunction Overview() {\r\n  return (\r\n    <section className=\"overview\">\r\n      <div className=\"wrapper\">\r\n        <h2>Overview - Today</h2>\r\n        <div className=\"grid\">\r\n          {\r\n            cardSmallList.map(({ icon, pageView,growth, key }) => (\r\n            <CardSmall \r\n              icon={icon}\r\n              key={key}\r\n              pageView={pageView}\r\n              growth={growth}\r\n            />\r\n            ))\r\n          }\r\n\r\n        \r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\nexport default Overview;","import React, { useState, useEffect } from \"react\";\nimport \"./global.css\";\nimport \"./header\";\nimport Header from \"./header\";\nimport TopCardList from \"./top-cards-list\";\nimport Overview from \"./overview\";\nimport Switch from \"./switch\";\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false);\n  const [checked, setChecked] = useState(false);\n\n  const mainClass = darkMode ? \"is-dark-mode\" : \"is-light-mode\";\n  function changeMedia(mq) {\n    setDarkMode(mq.matches);\n    setChecked(mq.matches);\n  }\n  useEffect(() => {\n    const mq = window.matchMedia(\"(prefers-color-sheme: dark)\");\n    mq.addListener(changeMedia);\n    setDarkMode(mq.matches);\n    setChecked(mq.matches);\n  }, []);\n  return (\n    <main className={mainClass}>\n      <Header>\n        <Switch \n        setDarkMode={setDarkMode} \n        checked={checked} \n        setChecked={setChecked} \n        />\n      </Header>\n      <TopCardList />\n      <Overview />\n    </main>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}